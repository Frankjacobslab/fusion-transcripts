#!/usr/bin/env python

################################################################################
# Script: bowtie2_counts.py
# Description: This script counts the number of reads mapped to each fusion 
# transcript for each sample from the FASTA files generated by bowtie2_alignment.py.
# Results are written to Counts_pivot_[date+time].txt.
# Usage: sbatch bowtie2_counts.py
################################################################################

#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=5
#SBATCH --mem=20GB
#SBATCH --time=7-12
#SBATCH --export=ALL

import os
import glob
from collections import defaultdict
from datetime import datetime

# Directory containing the output from bowtie2_alignment.py
output_dir = "bowtie2_aligned_reads"
fasta_dir = os.path.join(output_dir, "fasta")

# Function to count reads in a FASTA file
def count_reads_in_fasta(fasta_file):
    count = 0
    with open(fasta_file, 'r') as f:
        for line in f:
            if line.startswith('>'):
                count += 1
    return count

# Initialize a dictionary to store counts
counts = defaultdict(lambda: defaultdict(int))

# Get the list of fusion transcript directories
fusion_transcripts = os.listdir(fasta_dir)

# Process each fusion transcript directory
for transcript in fusion_transcripts:
    transcript_dir = os.path.join(fasta_dir, transcript)
    if not os.path.isdir(transcript_dir):
        continue
    
    # Get the list of FASTA files for this transcript
    fasta_files = glob.glob(os.path.join(transcript_dir, "*.fasta"))
    
    # Count reads in each FASTA file
    for fasta_file in fasta_files:
        # Extract sample name by removing the transcript part and taking the relevant part
        sample_name = os.path.basename(fasta_file).replace(f"{transcript}_", "").rsplit('_', 2)[0]
        read_count = count_reads_in_fasta(fasta_file)
        counts[transcript][sample_name] += read_count  # Combine counts for the same sample

# Write the counts to an output file
current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")  # Get current date and time
output_counts_file = f"Counts_pivot_{current_time}.txt"  # Include date and time in the output file name

with open(output_counts_file, "w") as out_file:
    # Write header with sample names
    samples = sorted(set(sample for sample_counts in counts.values() for sample in sample_counts))
    out_file.write("Fusion_Transcript\t" + "\t".join(samples) + "\n")
    
    # Write counts for each fusion transcript in alphabetical order
    for transcript in sorted(fusion_transcripts):
        if transcript in counts:
            out_file.write(transcript)
            for sample in samples:
                out_file.write(f"\t{counts[transcript].get(sample, 0)}")
            out_file.write("\n")

print(f"Counting completed. Results written to {output_counts_file}")
